2 4     BST A   => B = A % 8
1 1     BXL 1   => B = B ^ 1
7 5     CDV B   => C = DIV(A, B)
0 3     ADV 3   => A = DIV(A, 3)
4 3     BXC 3   => B = B ^ C
1 6     BXL 6   => B = B ^ 6 
5 5     OUT B   => disp(B % 8)
3 0     JNZ 0   => if a != 0 { jump to 0 }

***

do  {

    b = a & 0b111
    b = b ^ 1
    c = a >> b
    a = a >> 3
    b = b ^ c 
    b = b ^ 6 
    disp(b % 8)

} while (a != 0)


***


do  {

    b = (a & 0b111) ^ 1
    c = a >> b
    
    b = b ^ c ^ 6 

    disp(b % 8)
    a = a >> 3

} while (a > 0)

***

a = 0
a <<= 3



2,4,1,1,7,5,0,3,4,3,1,6,5,5,3,0

***

0 0001
3 100
5
5
6
1
3
4
3
0
5
7
1
1
4
2




***

n = len(stdout) = #bits(a) / 3

n = 16

#bits(a) = 54, 55, 56

=> 